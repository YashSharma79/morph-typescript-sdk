name: Publish Test Release to NPM
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the test release (default: test)'
        required: true
        default: 'test'
jobs:
  build-and-publish-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Create version script
        run: |
          cat > update-version.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const packageJson = require('./package.json');
          const tag = process.argv[2] || 'test';
          
          // Get base version without prerelease
          let [baseVersion] = packageJson.version.split('-');
          if (!baseVersion.match(/^\d+\.\d+\.\d+$/)) {
            baseVersion = '0.0.6'; // Fallback if version format is unexpected
          }
          
          // Query npm for existing versions
          const { execSync } = require('child_process');
          const npmVersions = execSync(`npm view ${packageJson.name} versions --json`).toString();
          const versions = JSON.parse(npmVersions || '[]');
          
          // Find highest prerelease version with our tag
          const regex = new RegExp(`^${baseVersion}-${tag}\.(\\d+)$`);
          let highestPrerelease = -1;
          
          versions.forEach(version => {
            const match = version.match(regex);
            if (match) {
              const num = parseInt(match[1], 10);
              highestPrerelease = Math.max(highestPrerelease, num);
            }
          });
          
          // Set new version
          const newVersion = `${baseVersion}-${tag}.${highestPrerelease + 1}`;
          console.log(`Updating from ${packageJson.version} to ${newVersion}`);
          
          // Update package.json
          packageJson.version = newVersion;
          fs.writeFileSync(
            path.resolve('./package.json'),
            JSON.stringify(packageJson, null, 2) + '\n'
          );
          
          console.log(`Version updated to ${newVersion}`);
          // Output for GitHub Actions
          console.log(`::set-output name=version::${newVersion}`);
          EOF
      
      - name: Update version
        id: version
        run: |
          node update-version.js ${{ github.event.inputs.tag }}
          echo "Updated to version $(node -p "require('./package.json').version")"
      
      - name: Build package
        run: npm run build
      
      - name: Run tests
        run: |
          npm run test:cjs || echo "CJS tests failed but continuing"
          npm run test:esm || echo "ESM tests failed but continuing"
      
      - name: Publish to NPM with tag
        run: npm publish --tag ${{ github.event.inputs.tag }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Output publish info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Published version $VERSION with tag ${{ github.event.inputs.tag }}"
          echo "Install with: npm install morphcloud@${{ github.event.inputs.tag }}"
